@Controller at class level - to mention that this class contains the logic for incoming request
@RequestMapping("say-hello") - at method level - to mention the url on the request
@ResponseBody - at method level - to mention that the method has details of the response body

Configuring the view resolver for Spring MVC
----------------------------------------------
* default spring boot path for maintaining jsp files is src/main/resources/META-INF/resources/WEB-INF/jsp
* maintain the properties for prefix and suffix in application.properties
		spring.mvc.view.prefix=src/main/resources/META-INF/resources/WEB-INF/jsp/
* however spring mvc already knows the path until src/main/resources/META-INF/resources/, so just put 
		spring.mvc.view.prefix=/WEB-INF/jsp/
		spring.mvc.view.suffix=.jsp

* Remove @ResponseBody - at method level, so that the response is obtained from the mentioned file

* However, we need to add the below dependency (tomcat-embed-jasper) to run the jsp files in springboot
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
========================================================================================================================
Capturing Query Params using RequestParam and first look at Model
---------------------------------------------------------------------
* Whatever values are passed in the request as Query Params are accepted by the controller using @RequestParam
* Once the value is captured, in order to send it back to jsp, use ModelMap
* Pass the parameter ModelMap and add the required details to modelmap to use them in a jsp
* In jsp, Expression language is used to display the value ${attribute_name_key}
========================================================================================================================
Understanding DispatcherServlet and ViewResolver
---------------------------------------------------
On clicking an url like this, http://localhost:8080/login?name=Anitha, below steps are executed by DispatcherServlet or FrontController
* Identifies the correct controller method
	/login => LoginController.gotoLoginPage
* Executes the controller method
	# puts data into model
	# returns view name (login)
* Identifies the correct view (View Resolver)
	# Gets the correct view by resolving the prefix and suffix and returned view name
		/WEB-INF/jsp/login.jsp
* Executes the view
	# Output of the view is sent back as a response to the browser.
========================================================================================================================
Session vs Request vs Model & @SessionAttributes
------------------------------------------------------
* payload data is not available after the next request is generated by the browser, that payload data is specific to the request
* model data is specific to the request and its jsp view, the data is not available beyond the request for the next jsp
* if we need some data like that to be available (like username), then we need to add that to session
* using @SessionAttributes("name") where this value is first put into a model
* this @SessionAttributes("name") also has to be put in the controller classes where the value will be used futher

* All requests from browser are handled by our web application deployed on a server
* Request Scope: 	Active for a single request ONLY
					Once the response is sent back, the request attributes will be removed from memory
					These cannot be used for future requests
					Recommended for most use cases

* Session Scope: 	Details stored across multiple requests
					Be careful about what you store in session (Takes additional memory as all details are stored on server)
========================================================================================================================
Using JSTL : JSP Standard Tag Library
---------------------------------------
* Add the below dependencies
	# jakarta.servlet.jsp.jstl-api is the interface specification
	# glassfish-jstl is one of the implementation of JSTL
	
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>glassfish-jstl</artifactId>
		</dependency>

* import the below in jsp page, where you need to use JSTL-Core 
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		
* Using for each loop from JSTL core library to iterate over todo list in JSP
				<c:forEach items="${todos}" var="todo">
					<tr>
						<td>${todo.id}</td>
						<td>${todo.description}</td>
						<td>${todo.targetDate}</td>
						<td>${todo.done}</td>
					</tr>
				</c:forEach>
========================================================================================================================				
Using Bootstrap CSS framework using webjars
-----------------------------------------------
* Add the below dependencies, for the below we need to add version explicitly 
* Because it is not provided by spring-boot-starter-parent
	# bootstrap
	# jquery
	
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.2.3</version>
		</dependency>
		
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.0</version>
		</dependency>

* Actual path inside the downloaded jars
	# /META-INF/resources/webjars/bootstrap/5.2.3/css/bootstrap.min.css
	# /META-INF/resources/webjars/bootstrap/5.2.3/js/bootstrap.min.js
	# /META-INF/resources/webjars/jquery/3.6.0/jquery.min.js
	
* /META-INF/resources/ is already known path, need not be added explicilty in jsp files, relative path is sufficient

* CSS file should be loaded in the start itself
* To add css reference, use link tag like below (rel="stylesheet") is used to mention explicity that this is a style sheet
	# <link href="webjars/bootstrap/5.2.3/css/bootstrap.min.css" rel="stylesheet" >
	
* Javascript is used to do several dynamic stuff in addition to what is possible by html
* <script> tags are typically added at the closing tag of the body
	# <script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
	# <script src="webjars/jquery/3.6.0/jquery.min.js"></script>
========================================================================================================================
Formatting JSP pages with bootstrap framework
------------------------------------------------
* Bootstrap recommends adding the content of entire <body> tag with in a div with class container
	# <body>
		<div class="container">
		</div>
	  </body>
	  
* Bootstrap provides class table for formatting the tables
	# <table class="table">

* Button CSS:
	# <a href="add-todo" class="btn btn-success">Add Todo</a>
	# Button classes: https://www.w3schools.com/bootstrap/bootstrap_ref_css_buttons.asp
========================================================================================================================
To return another action instead of a jsp page from a request implementation method
# use return "redirect:list-todos";
========================================================================================================================
Validations using Spring Boot Starter Validation
---------------------------------------------------------
1: Spring Boot Starter Validation
	pom.xml
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
2: Command Bean (Form Backing Object)
	2-way binding (todo.jsp & TodoController.java)
3: Add Validations to Bean
	Todo.java
4: Display Validation Errors in the View
	todo.jsp

Command Bean (Form Backing Object)
-------------------------------------
1. Use spring form tag libraries in jsp
	# <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	# Use form prefix for the form tag, and add the modelAttribute
		<form:form method="post" modelAttribute="todo">
	# Use form prefix for the input tag, and change the name attribute as path and match the bean field
		<form:input type="text" path="description" required="required"/>
		
2-way binding - Bean to the form and form to the bean

Add Validations to Bean
-------------------------------------
* On the Todo bean add the validation annotations at the field level
	@Size(min = 10, message = "Enter atleast 10 characters" )
* Add @Valid annotation on the todo parameter in the post method, where we have logic to add new todo

Display Validation Errors in the View
-------------------------------------
* Add a parameter (BindingResult result) in the post method, so that the validation errors are collected in it.
	# public String addNewTodo(ModelMap model, @Valid Todo todo, BindingResult result) {
* If binding result has errors, then return the same page, instead of redirecting to list todos.
* Add form error tag to jsp. This tag will have only path attribute and not type attribute.
	# <form:errors path="descrption" />	
	# since this is a spring tag, add cssClass as an attribute, instead of html class attribute
========================================================================================================================
Introducing a new field for date
----------------------------------
* Introduce form label, instead of having plain text, use path attribute
	<form:label path="description">Description</form:label>
* All the tags related to a single field can be grouped into <fieldset>
* Use margin with "mb-3" for better spacing <fieldset class="mb-3">
* Similar to description, create another fieldset for targetDate
* Use spring.mvc.format.date=yyyy-MM-dd in application.properties to maintain uniform date format across application

Use the below dependency for datepicker
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap-datepicker</artifactId>
			<version>1.9.0</version>
		</dependency>

* Link bootstrap-datepicker.standalone.min.css for css
	# <link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet">
* Link bootstrap-datepicker.min.js for javascript
	# <script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
* Open up datepicker for the field based on id, mention the date format also here
	# Note: in javascript, mm is used for month
		<script type="text/javascript">
			$('#targetDate').datepicker({
				format: 'yyyy-mm-dd'
			});
		</script>
========================================================================================================================
Navigation bar
-----------------
* Code snippet
	<nav class="navbar navbar-expand-md navbar-light bg-light mb-3 p-1">
		<a class="navbar-brand m-1" href="https://courses.in28minutes.com">in28Minutes</a>
		<div class="collapse navbar-collapse">
			<ul class="navbar-nav">
				<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
				<li class="nav-item"><a class="nav-link" href="/list-todos">Todos</a></li>
			</ul>
		</div>
		<ul class="navbar-nav">
			<li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
		</ul>	
	</nav>
	
* Move the common code into common/<filename>.jspf file and use include directive to refer it.
	# <%@ include file="common/header.jspf" %>
========================================================================================================================
References:
---------------
👉 Bookmark the GitHub folder for this section
--------------------------------------------------
https://github.com/in28minutes/master-spring-and-spring-boot/tree/main/11-web-application

👉 Help for Debugging Problems
-------------------------------------
Here's the code backup at the end of step 05: 
https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/11-web-application/Step05.md
Step by Step changes are detailed here: 
https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/11-web-application/99-step-by-step-changes.md

Code Changes for Step19 - https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/11-web-application/99-step-by-step-changes.md#step19

