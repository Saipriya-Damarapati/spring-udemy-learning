Iteration 1 : AppGamingBasicJava : Tightly coupled Java code:
---------------------------------------------------------------------
* GameRunner class
* Game classes: Mario, SuperContra, Pacman etc

GameRunner class is tightly coupled with a specific class
If we need MarioGame, then we need to make use of MarioGame implementation in GameRunner class
Whereas if we need SuperContraGame, we need to make use of SuperContra implementation in GameRunner class

Coupling: How much work is involved in changing something?
We want loose coupling as much as possible
========================================================================================================================
Iteration 2 : Loose Coupling using interfaces : AppGamingUsingInterfaces
---------------------------------------------------------------------------
* GameRunner class
* GamingConsole interface
* Game classes: Mario, SuperContra, Pacman etc

Now, in the example, GamingConsole interface is implemented by all the games
So, we need not change the constructor for every new game in the GameRunner class, we can actually make use of the created interface, 
GameRunner class is disconnected or loosely coupled from specific Game classes, this is called loose coupling.
No change is required on GameRunner to change the Game, it doesn't matter which game is running for GameRunner class now
========================================================================================================================
Iteration 3 : Magic of Spring Framework
---------------------------------------------------------------------------

========================================================================================================================
Spring Container - Manages spring beans and their life cycle, this is also called as IOC container or Spring context
Two IOC containers are 
1. Bean Factory - Basic Spring Container
2. Application Context - Advanced Spring Container with enterprise specific features
	Easy to use in web applications, web services, REST API and microservices
	Easy internationalization
	Easy integration with Spring AOP
========================================================================================================================
Pojo vs JavaBeans vs Spring Beans
---------------------------------------------
Pojo - Plain Old Java Object, all Java objects are Pojos
Java Beans - should have public no args constructor, should have getters and setters for all the fields, should implement Serializable interface
Spring Beans - Any Java object that is managed by Spring
	Spring uses IOC container (Bean Factory or Application Context) to manage these objects.
========================================================================================================================
Multiple matching beans in Spring context
---------------------------------------------
Make one of them primary
Use @Qualifier for referring specific bean
========================================================================================================================
References:
https://github.com/in28minutes/course-material/blob/main/00-master-spring-and-spring-boot/downloads.md

Resources for Installing Java and Eclipse - Next Video
Link to Github Repo: https://github.com/in28minutes/master-spring-and-spring-boot/#installing-tools

Our Recommendations
-------------------------
Use the LATEST version of Java
Use the LATEST version of "Eclipse IDE for Enterprise Java Developers"
Remember: Spring Boot 3+ works only with Java 17+

Installing Java
-------------------------
Windows - https://www.youtube.com/watch?v=I0SBRWVS0ok
Linux - https://www.youtube.com/watch?v=mHvFpyHK97A
Mac - https://www.youtube.com/watch?v=U3kTdMPlgsY

Troubleshooting
-------------------------
Troubleshooting Java Installation - https://www.youtube.com/watch?v=UI_PabQ1YB0

Installing Eclipse
-------------------------
Windows - https://www.youtube.com/watch?v=toY06tsME-M
Others - https://www.youtube.com/watch?v=XveQ9Gq41UM

Troubleshooting
-------------------------
Configuring Java in Eclipse - https://www.youtube.com/watch?v=8i0r_fcE3L0
===========================================================================================================================
CODE BACKUP and STEP BY STEP CHANGES : For Coding Reference and Debugging
ðŸ‘‰ Bookmark the GitHub folder for this section
---------------------------------------------------
https://github.com/in28minutes/master-spring-and-spring-boot/tree/main/01-spring

ðŸ‘‰ Help for Debugging Problems
-------------------------------------
Here's the code backup at the end of step 05: https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/01-spring/01-Step05.md
Step by Step changes are detailed here: https://github.com/in28minutes/master-spring-and-spring-boot/blob/main/01-spring/step-by-step-code-changes/step-by-step-guide.md